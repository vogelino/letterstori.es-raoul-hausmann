{"ast":null,"code":"import camelCase from 'camelcase';\nimport { plural } from 'pluralize';\nimport entitiesData from '../data/entities';\nimport documentsData from '../data/documents';\nimport storiesData from '../data/stories';\n\nconst resolveEntityReferenceList = docKey => doc => (doc[docKey] || []).map(id => entitiesData.find(entity => id === entity.id));\n\nconst createGettersByType = (type, dataSet) => ({\n  [type]: (_, {\n    id\n  }) => dataSet.find(item => id === item.id),\n  [camelCase(`all-${plural(type)}`)]: () => dataSet\n});\n\nconst findSiblingDocumentsInStory = (docId, storyId) => {\n  const storyDocuments = documentsData.filter(({\n    story\n  }) => story && story.id === storyId);\n  const indexOfDoc = storyDocuments.findIndex(({\n    id\n  }) => id === docId);\n  const prevDocument = storyDocuments[indexOfDoc - 1] || storyDocuments[storyDocuments.length - 1];\n  const nextDocument = storyDocuments[indexOfDoc + 1] || storyDocuments[0];\n  return {\n    prevDocumentInStory: prevDocument.id,\n    nextDocumentInStory: nextDocument.id\n  };\n};\n\nconst findStoryDetails = storyId => storiesData.find(({\n  id: idInStories\n}) => idInStories === storyId);\n\nconst findStoryCorrespondents = storyId => Object.values(documentsData.filter(({\n  story: docStory\n}) => docStory && docStory.id === storyId).reduce((acc, doc) => {\n  const docRecipients = resolveEntityReferenceList('recipients')(doc);\n  const docSenders = resolveEntityReferenceList('senders')(doc);\n  docRecipients.concat(docSenders).forEach(entity => {\n    acc[entity.id] = entity;\n  });\n  return acc;\n}, {}));\n\nconst resolvers = {\n  Query: Object.assign({}, createGettersByType('document', documentsData), createGettersByType('entity', entitiesData), createGettersByType('story', storiesData)),\n  Document: {\n    creators: resolveEntityReferenceList('creators'),\n    senders: resolveEntityReferenceList('senders'),\n    recipients: resolveEntityReferenceList('recipients'),\n    entityMentions: resolveEntityReferenceList('entityMentions'),\n    date: ({\n      date\n    }) => {\n      const parsedDate = Date.parse(date);\n      const dateObj = isNaN(parsedDate) ? new Date('01/01/1919') : new Date(date);\n      return dateObj.toISOString();\n    },\n    thumbnail: ({\n      files\n    }) => `${process.env.IMAGE_SMALL_BASE_URL}${files[0]}`,\n    files: ({\n      files\n    }) => files,\n    story: ({\n      story,\n      id: docId\n    }) => {\n      if (!story) return null;\n      console.log(findStoryDetails(story.id)); // eslint-disable-line\n\n      return Object.assign({}, story, findStoryDetails(story.id) || {}, findSiblingDocumentsInStory(docId, story.id), {\n        correspondents: findStoryCorrespondents(story.id) || []\n      });\n    }\n  }\n};\nexport default resolvers;","map":{"version":3,"sources":["/Users/lucasvogel/Sites/raoul-hausmann-server/graphql/resolvers.js"],"names":["camelCase","plural","entitiesData","documentsData","storiesData","resolveEntityReferenceList","docKey","doc","map","id","find","entity","createGettersByType","type","dataSet","_","item","findSiblingDocumentsInStory","docId","storyId","storyDocuments","filter","story","indexOfDoc","findIndex","prevDocument","length","nextDocument","prevDocumentInStory","nextDocumentInStory","findStoryDetails","idInStories","findStoryCorrespondents","Object","values","docStory","reduce","acc","docRecipients","docSenders","concat","forEach","resolvers","Query","assign","Document","creators","senders","recipients","entityMentions","date","parsedDate","Date","parse","dateObj","isNaN","toISOString","thumbnail","files","process","env","IMAGE_SMALL_BASE_URL","console","log","correspondents"],"mappings":"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","sourcesContent":["import camelCase from 'camelcase';\nimport { plural } from 'pluralize';\nimport entitiesData from '../data/entities';\nimport documentsData from '../data/documents';\nimport storiesData from '../data/stories';\n\nconst resolveEntityReferenceList = (docKey) => (doc) => (doc[docKey] || []).map((id) =>\n\tentitiesData.find((entity) => id === entity.id)\n);\n\nconst createGettersByType = (type, dataSet) => ({\n\t[type]: (_, { id }) => dataSet.find((item) => id === item.id),\n\t[camelCase(`all-${plural(type)}`)]: () => dataSet,\n});\n\nconst findSiblingDocumentsInStory = (docId, storyId) => {\n\tconst storyDocuments = documentsData.filter(({ story }) => story && story.id === storyId);\n\tconst indexOfDoc = storyDocuments.findIndex(({ id }) => id === docId);\n\tconst prevDocument = storyDocuments[indexOfDoc - 1] || storyDocuments[storyDocuments.length - 1];\n\tconst nextDocument = storyDocuments[indexOfDoc + 1] || storyDocuments[0];\n\treturn {\n\t\tprevDocumentInStory: prevDocument.id,\n\t\tnextDocumentInStory: nextDocument.id,\n\t};\n};\n\nconst findStoryDetails = (storyId) =>\n\tstoriesData.find(({ id: idInStories }) => idInStories === storyId);\n\nconst findStoryCorrespondents = (storyId) => Object.values(\n\tdocumentsData\n\t\t.filter(({ story: docStory }) => docStory && docStory.id === storyId)\n\t\t.reduce((acc, doc) => {\n\t\t\tconst docRecipients = resolveEntityReferenceList('recipients')(doc);\n\t\t\tconst docSenders = resolveEntityReferenceList('senders')(doc);\n\t\t\tdocRecipients.concat(docSenders).forEach((entity) => {\n\t\t\t\tacc[entity.id] = entity;\n\t\t\t});\n\t\t\treturn acc;\n\t\t}, {})\n);\n\nconst resolvers = {\n\tQuery: Object.assign({},\n\t\tcreateGettersByType('document', documentsData),\n\t\tcreateGettersByType('entity', entitiesData),\n\t\tcreateGettersByType('story', storiesData),\n\t),\n\tDocument: {\n\t\tcreators: resolveEntityReferenceList('creators'),\n\t\tsenders: resolveEntityReferenceList('senders'),\n\t\trecipients: resolveEntityReferenceList('recipients'),\n\t\tentityMentions: resolveEntityReferenceList('entityMentions'),\n\t\tdate: ({ date }) => {\n\t\t\tconst parsedDate = Date.parse(date);\n\t\t\tconst dateObj = isNaN(parsedDate) ? new Date('01/01/1919') : new Date(date);\n\t\t\treturn dateObj.toISOString();\n\t\t},\n\t\tthumbnail: ({ files }) => `${process.env.IMAGE_SMALL_BASE_URL}${files[0]}`,\n\t\tfiles: ({ files }) => files,\n\t\tstory: ({ story, id: docId }) => {\n\t\t\tif (!story) return null;\n\t\t\tconsole.log(findStoryDetails(story.id)); // eslint-disable-line\n\t\t\treturn Object.assign(\n\t\t\t\t{},\n\t\t\t\tstory,\n\t\t\t\tfindStoryDetails(story.id) || {},\n\t\t\t\tfindSiblingDocumentsInStory(docId, story.id),\n\t\t\t\t{\n\t\t\t\t\tcorrespondents: findStoryCorrespondents(story.id) || [],\n\t\t\t\t},\n\t\t\t);\n\t\t},\n\t},\n};\n\nexport default resolvers;\n"]},"metadata":{},"sourceType":"module"}